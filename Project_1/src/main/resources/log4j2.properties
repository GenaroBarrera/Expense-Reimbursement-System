# log4j's internal logger level. this will output startup and shutdown info to a log. raise the logging
# to reduce or remove this output
status = warn

#Logging Level
#ALL => all levels
#DEBUG => designates fine-grained informational events that are most useful to debug an application
#INFO => informational messages that highlight the progress of the application at the coarse grained level
#WARN => designates potentially harmful situations
#ERROR => designates error events that might still allow the application to continue running
#FATAL => severe error events that presumably lead the application to abort
#OFF => highest possible level, intended to turn off logging

#console appender config
appender.console.type = Console
appender.console.name = LogToConsole
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

# Rotate log file
appender.rolling.type = RollingFile
appender.rolling.name = LogToRollingFile
appender.rolling.fileName = logs/app.log
appender.rolling.filePattern = logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d %p %C{1.} [%t] %m%n
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=10MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 10

logger.app.name = com.revature
logger.app.level = debug
logger.app.additivity = false
logger.app.appenderRef.console.ref = LogToConsole
logger.app.appenderRef.rolling.ref = LogToRollingFile

# root logger which is a singleton logger available to all classes
rootLogger.level = info
rootLogger.appenderRef.stdout.ref = LogToRollingFile